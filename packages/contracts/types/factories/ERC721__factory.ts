/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721, ERC721Interface } from "../ERC721";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161058d38038061058d833981810160405281019061003291906101f5565b6100458261005f60201b6100091760201c565b6100588161008e60201b6100321760201c565b50506103bc565b600061006f6100bd60201b60201c565b9050818160000190805190602001906100899291906100ea565b505050565b600061009e6100bd60201b60201c565b9050818160010190805190602001906100b89291906100ea565b505050565b6000807f3abe2d40db443ccb6663c610ceec8f31a931ca895e298c6718782f83656c0ea790508091505090565b8280546100f6906102ea565b90600052602060002090601f016020900481019282610118576000855561015f565b82601f1061013157805160ff191683800117855561015f565b8280016001018555821561015f579182015b8281111561015e578251825591602001919060010190610143565b5b50905061016c9190610170565b5090565b5b80821115610189576000816000905550600101610171565b5090565b60006101a061019b84610286565b610261565b9050828152602081018484840111156101b857600080fd5b6101c38482856102b7565b509392505050565b600082601f8301126101dc57600080fd5b81516101ec84826020860161018d565b91505092915050565b6000806040838503121561020857600080fd5b600083015167ffffffffffffffff81111561022257600080fd5b61022e858286016101cb565b925050602083015167ffffffffffffffff81111561024b57600080fd5b610257858286016101cb565b9150509250929050565b600061026b61027c565b9050610277828261031c565b919050565b6000604051905090565b600067ffffffffffffffff8211156102a1576102a061037c565b5b6102aa826103ab565b9050602081019050919050565b60005b838110156102d55780820151818401526020810190506102ba565b838111156102e4576000848401525b50505050565b6000600282049050600182168061030257607f821691505b602082108114156103165761031561034d565b5b50919050565b610325826103ab565b810181811067ffffffffffffffff821117156103445761034361037c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6101c2806103cb6000396000f3fe6080604052600080fd5b600061001361005b565b90508181600001908051906020019061002d929190610088565b505050565b600061003c61005b565b905081816001019080519060200190610056929190610088565b505050565b6000807f3abe2d40db443ccb6663c610ceec8f31a931ca895e298c6718782f83656c0ea790508091505090565b8280546100949061012b565b90600052602060002090601f0160209004810192826100b657600085556100fd565b82601f106100cf57805160ff19168380011785556100fd565b828001600101855582156100fd579182015b828111156100fc5782518255916020019190600101906100e1565b5b50905061010a919061010e565b5090565b5b8082111561012757600081600090555060010161010f565b5090565b6000600282049050600182168061014357607f821691505b602082108114156101575761015661015d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fdfea264697066735822122004a8981ca973244bef98b0f1cecbfb7e16716ccdc78cd56c335b1ebd3de8e3cb64736f6c63430008040033";

type ERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721__factory extends ContractFactory {
  constructor(...args: ERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC721";
  }

  deploy(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<ERC721>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  attach(address: string): ERC721 {
    return super.attach(address) as ERC721;
  }
  connect(signer: Signer): ERC721__factory {
    return super.connect(signer) as ERC721__factory;
  }
  static readonly contractName: "ERC721";
  public readonly contractName: "ERC721";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721Interface {
    return new utils.Interface(_abi) as ERC721Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC721 {
    return new Contract(address, _abi, signerOrProvider) as ERC721;
  }
}
